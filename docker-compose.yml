version: "3.9"

services:
  postgres:
    image: postgres:9.3
    container_name: inep-postgres
    env_file:
      - ./.env
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - inep-net

  # Pipeline "end-to-end": deps + dbt deps + build (seed+run+test)
  pipeline:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.14
    container_name: inep-pipeline
    env_file:
      - ./.env
    environment:
      - DBT_PROFILES_DIR=/opt/app/dbt/profiles
      # opcional: componha nome de schema por ambiente com o macro (ex.: gold_pro)
      # - AMB=pro
    volumes:
      - ./:/opt/app
    working_dir: /opt/app
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -lc "
      set -e
      pip install --upgrade pip &&
      pip install --no-cache-dir -r requirements.txt &&
      dbt debug --project-dir dbt --profiles-dir $DBT_PROFILES_DIR --profile inep_postgres &&
      dbt deps  --project-dir dbt --profiles-dir $DBT_PROFILES_DIR &&
      dbt build --project-dir dbt --profiles-dir $DBT_PROFILES_DIR --profile inep_postgres --full-refresh
      "
    networks:
      - inep-net

  # CLI interativa: use 'docker compose run --rm dbt-cli <comando>'
  dbt-cli:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.14
    container_name: dbt-cli
    env_file:
      - ./.env
    environment:
      - DBT_PROFILES_DIR=/opt/app/dbt/profiles
    volumes:
      - ./:/opt/app
    working_dir: /opt/app
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: "dbt debug --profiles-dir $DBT_PROFILES_DIR --project-dir dbt --profile inep_postgres"
    networks:
      - inep-net

networks:
  inep-net:

volumes:
  postgres_data:
